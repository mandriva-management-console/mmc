<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<article class="whitepaper">

  <title>MDS Style Guide for Python Code</title>

  <articleinfo>

    <author>
      <firstname>Cédric</firstname>
      <surname>Delfosse</surname>
      <email>cdelfosse@mandriva.com</email>
    </author>

    <affiliation>
      <orgname>Mandriva</orgname>
    </affiliation>

    <copyright>
      <year>2009-2010 Cédric Delfosse - Mandriva</year>
    </copyright>

    <revhistory>
      <revision>
        <revnumber>$Revision$</revnumber>
        <date>$Date$</date>
        <authorinitials>$Author$</authorinitials>
      </revision>
    </revhistory>

    <productname>MDS components written in Python</productname>
    <productnumber>All MDS component version</productnumber>

    <abstract>
      <para>Coding conventions for the Python code of all MDS components</para>
    </abstract>

  </articleinfo>

  <section>

    <title>Introduction</title>

    <para>A lot of MDS components are written in Python, among them the MMC agent and its Python plugin.</para>

    <para>This document sets the coding conventions for the Python code of all MDS components.</para>

    <para>This document is totally based on Guido Van Rossum "Style Guide for Python Code" document (see http://www.python.org/dev/peps/pep-0008/): you must read it too. This document only emphases on important coding conventions.</para>

  </section>

  <section>

    <title>Code layout</title>

    <para>
      Indentation: use 4 spaces per indentation level, no tabs allowed. It's ok with Emacs Python mode.
    </para>
    <para>
      Encoding: the source code must always use the UTF-8 encoding.
    </para>

  </section>

  <section>

    <title>Whitespace in Expressions and Statements</title>

    <screen>
      Yes: spam(ham[1], {eggs: 2})
      No:  spam( ham[ 1 ], { eggs: 2 } )

      Yes: if x == 4: print x, y; x, y = y, x
      No:  if (x == 4): print x, y; x, y = y, x
      No:  if x == 4 : print x , y ; x , y = y , x

      Yes: spam(1)
      No:  spam (1)

      Yes: dict['key'] = list[index]
      No:  dict ['key'] = list [index]

      Yes:
      x = 1
      y = 2
      long_variable = 3

      No:
      x             = 1
      y             = 2
      long_variable = 3
    </screen>

  </section>

  <section>

    <title>Naming conventions</title>

    <para>
      Module name: short, lowercase names, without underscores
    </para>
    <para>
      Class Names: CapitalizedWords
    </para>
    <para>
      Functions Names: mixedCase for instance method, lower_case_with_underscores for other.
    </para>
    <para>
      Constants: UPPER_CASE_WITH_UNDERSCORE
    </para>

  </section>

  <section>

    <title>Comments</title>

    <para>
      They are written in english.
    </para>
    <para>
      They always start with a capitalized first word.
    </para>
    <para>
      There is always a space between the # and the begin of the comment.
    </para>

  </section>

  <section>

    <title>Docstrings</title>

    <para>
      All modules, functions and classes must have a docstring.
    </para>
    <para>
      The docstring must be written in the Epytext Markup Language
      format. We use epydoc to generate the API documentation. See
      http://epydoc.sourceforge.net/epytext.html and
      http://epydoc.sourceforge.net/fields.html for more
      information.
    </para>

    <para>
      The recommanded epydoc fields are:
    </para>

    <screen>
      def foo(a, b, c):
          """
          This methods performs funny things.

          @param a: first parameter of foo
          @type a: int
          @param b: second parameter of foo
          @type b: str
          @param c: third parameter of foo
          @type c: unicode

          @raise ExceptionFoo: raised if b == 'bar'
          @rtype: int
          @return: the result should be 42
          """
    </screen>

    <para>
      Remarks:
      <itemizedlist>
	<listitem>
	  <para>
	    Sometimes the method description can be written in @return if the function is simple.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    If you skip @param because the parameter name seems really explicit to you, use at least: @rtype and @return
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Please use a spellchecker for your docstrings
	  </para>
	</listitem>
      </itemizedlist>
    </para>

  </section>

  <section>

    <title>Python module import rules</title>

    <para>
      "from mod import *" is forbidden, because it doesn't allow us to track module dependencies effectively.
    </para>
    <para>
      The import order should be:
    </para>
    <screen>
      # Import standard python module
      import os
      import sys

      # Import external modules (SQLAlchemy, Twisted, python-ldap, etc.)
      from sqlalchemy.orm import create_session

      # Import internal modules
      from mmc.plugins.base import ...
    </screen>

  </section>

  <section>

    <title>SQLAlchemy code convention</title>

    <section>

      <title>Querying with the ORM</title>

      <para>
	Here are the recommended code guidelines when querying using the ORM:
      </para>

      <itemizedlist>
	<listitem>
	  <para>
	    First select the objects you want as a result:
	    <screen>
	      results = session.query(Table1).add_entity(Table2).add_entity(...) \
	    </screen>
	    If your query will return more than one row, please call the query "results", or "rows". If you are querying for one object only, please use a variable name corresponding to this object.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Then if needed perform a join between the tables. It is usually done using join in a select_from expression
	    <screen>
	      .select_from(table1.join(table2).join(...)) \
	    </screen>
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Then add filter expressions to filter down the query:
	    <screen>
	      .filter(Table1.num == 42) \
	      .filter(Table2.num == -42) \
	    </screen>
	    Please use "Table1.num" instead of "table1.c.num", because it's more pythonish.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    At least add the query limit:
	    <screen>
	      .all() # .first() .one(), or count()
	    </screen>
	  </para>
	</listitem>
      </itemizedlist>

      <para>
	Here is the complete query code:
      </para>

      <screen>
        results = session.query(Table1).add_entity(Table2).add_entity(...) \
                  .select_from(table1.join(table2).join(...)) \
                  .filter(Table1.num == 42) \
                  .filter(Table2.num == -42) \
                  .all()

        # Also accepted
        results = session.query(Table1).add_entity(Table2).add_entity(...). \
                  select_from(table1.join(table2).join(...)). \
                  filter(Table1.num == 42). \
                  filter(Table2.num == -42). \
                  all()

        # Also accepted
        results = session.query(Table1).add_entity(Table2).add_entity(...)
        results = results.select_from(table1.join(table2).join(...))
        results = results.filter(Table1.num == 42)
        results = results.filter(Table2.num == -42)
        results = results.all()
      </screen>

      <para>
	If you're looking for one result only (e.g. to get the properties of an object or check its existence) please use "one()" instead of "first()". "one()" will raise an exception if no object or more than one objects if returned, and so it forces you to deal with the exception.
      </para>

    </section>

  </section>

  <section>

    <title>Tools to check Python code</title>

    <para>
      Use the pyflakes tool to check your code. The code must be fixed
      if these messages are displayed:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  "import * used; unable to detect undefined names"
	</para>
      </listitem>
      <listitem>
	<para>
	  "'x' undefined variable"
	</para>
      </listitem>
      <listitem>
	<para>
	  "'x' imported but unused"
	</para>
      </listitem>
    </itemizedlist>

  </section>

  <section>
    <title>Python language version compatibility</title>

    <para>
      The code must be compatible with Python 2.3. That's a rather old version, but we never had any problems that forced us to use a newer version.
    </para>

  </section>

  <section>
    <title>Python additional library compatibility</title>

    <para>
      The code must be compatible with these library versions:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  Python Twisted: 8.1.0
	</para>
      </listitem>
      <listitem>
	<para>
	  Python LDAP: 2.0
	</para>
      </listitem>
      <listitem>
	<para>
	  Python SQLAlchemy: 0.4
	</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>

    <title>Python code copyright header</title>

    <para>
      Here is the header that must be used:
    </para>

    <screen>
# -*- coding: utf-8; -*-
#
# (c) 2004-2007 Linbox / Free&amp;ALter Soft, http://linbox.com
# (c) 2007-2010 Mandriva, http://www.mandriva.com
#
# $Id$
#
# This file is part of Management Console.
#
# MMC is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# MMC is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with MMC.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
    </screen>

  </section>

</article>
